package insts

//nolint:gocyclo,funlen
func (d *Disassembler) initializeDecodeTable() {
	d.decodeTables = make(map[FormatType]*decodeTable)

	// SOP2 instructions

	d.addInstType(&InstType{"S_ADD_U32", 0, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_SUB_U32", 1, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_ADD_I32", 2, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_SUB_I32", 3, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_ADDC_U32", 4, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_SUBB_U32", 5, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_MIN_I32", 6, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_MIN_U32", 7, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_MAX_I32", 8, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_MAX_U32", 9, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CSELECT_B32", 10, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CSELECT_B64", 11, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_AND_B32", 12, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_AND_B64", 13, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_OR_B32", 14, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_OR_B64", 15, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_XOR_B32", 16, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_XOR_B64", 17, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_ANDN2_B32", 18, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_ANDN2_B64", 19, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_ORN2_B32", 20, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_ORN2_B64", 21, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_NAND_B32", 22, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_NAND_B64", 23, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_NOR_B32", 24, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_NOR_B64", 25, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_XNOR_B32", 26, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_XNOR_B64", 27, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_LSHL_B32", 28, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_LSHL_B64", 29, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_LSHR_B32", 30, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_LSHR_B64", 31, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_ASHR_I32", 32, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_ASHR_I64", 33, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_BFM_B32", 34, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_BFM_B64", 35, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_MUL_I32", 36, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_BFE_U32", 37, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_BFE_I32", 38, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_BFE_U64", 39, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_BFE_I64", 40, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CBRAHCN_G_FORK", 41, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_ABSDISS_I32", 42, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_RFE_RESTORE_B64", 43, FormatTable[SOP2], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})

	// VOP2 instructions
	d.addInstType(&InstType{"V_CNDMASK_B32_E32", 0, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_ADD_F32_E32", 1, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUB_F32_E32", 2, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUBREV_F32_E32", 3, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_LEGACY_F32", 4, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_F32_E32", 5, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_I32_I24_E32", 6, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_HI_I32_I24", 7, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_U32_U24_E32", 8, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_HI_U32_U24", 9, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MIN_F32_E32", 10, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAX_F32_E32", 11, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MIN_I32_E32", 12, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAX_I32_E32", 13, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MIN_U32_E32", 14, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAX_U32_E32", 15, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_LSHRREV_B32_E32", 16, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_ASHRREV_I32_E32", 17, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_LSHLREV_B32_E32", 18, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_AND_B32_E32", 19, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_OR_B32_E32", 20, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_XOR_B32_E32", 21, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAC_F32_E32", 22, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MADMK_F32", 23, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MADAK_F32", 24, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_ADD_U32_E32", 25, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUB_U32_E32", 26, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUBREV_U32_E32", 27, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_ADDC_U32_E32", 28, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUBB_U32_E32", 29, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUBBREV_U32", 30, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_ADD_F16", 31, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUB_F16", 32, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUBREV_F16", 33, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_F16", 34, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAC_F16", 35, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MADMK_F16", 36, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MADAK_F16", 37, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_ADD_U16", 38, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUB_U16", 39, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUBREV_U16", 40, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_LO_U16", 41, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_LSHLREV_B16_E32", 42, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_LSHRREV_B16", 43, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_ASHRREV_I16", 44, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAX_F16", 45, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MIN_F16", 46, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAX_U16", 47, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAX_I16", 48, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MIN_U16", 49, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MIN_I16", 50, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_LDEXP_F16", 51, FormatTable[VOP2], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})

	// VOP1 instructions
	d.addInstType(&InstType{"V_NOP", 0, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MOV_B32_E32", 1, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_READFIRSTLANE_B32", 2, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_I32_F64", 3, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_F64_I32_E32", 4, FormatTable[VOP1], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_F32_I32", 5, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_F32_U32_E32", 6, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_U32_F32_E32", 7, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_I32_F32_E32", 8, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_F16_F32", 10, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_F32_F16", 11, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_RPI_I32_F32", 12, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_FLR_I32_F32", 13, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_OFF_F32_I4", 14, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_F32_F64_E32", 15, FormatTable[VOP1], 0, ExeUnitVALU, 32, 64, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_F64_F32_E32", 16, FormatTable[VOP1], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_F32_UBYTE0", 17, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_F32_UBYTE1", 18, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_F32_UBYTE2", 19, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_F32_UBYTE3", 20, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_U32_F64", 21, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_F64_U32", 22, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_TRUNC_F64", 23, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CEIL_F64", 24, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_RNDNE_F64", 25, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_FLOOR_F64", 26, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_FRACT_F32", 27, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_TRUNC_F32_E32", 28, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CEIL_F32", 29, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_RNDNE_F32_E32", 30, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_FLOOR_F32", 31, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_EXP_F32_E32", 32, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_LOG_F32", 33, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_RCP_F32_E32", 34, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_RCP_IFLAG_F32_E32", 35, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_RSQ_F32_E32", 36, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_RCP_F64_E32", 37, FormatTable[VOP1], 0, ExeUnitVALU, 64, 64, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_RSQ_F64", 38, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SQRT_F32_E32", 39, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SQRT_F64", 40, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SIN_F32", 41, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_COS_F32", 42, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_NOT_B32_E32", 43, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_BFREV_B32_E32", 44, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_FFBH_U32_E32", 45, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_FFBL_B32", 46, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_FFBH_I32", 47, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_FREXP_EXP_I32_F64", 48, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_FREXP_MANT_F64", 49, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_FRACT_F64", 50, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_FREXP_EXP_I32_F32", 51, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_FREXP_MANT_F32", 52, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CLREXCP", 53, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MOVRELD_B32", 54, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MOVRELS_B32", 55, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MOVRELSD_B32", 56, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_F16_U16", 57, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_F16_I16", 58, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_U16_F16", 59, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_I16_F16", 60, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_RCP_F16", 61, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SQRT_F16", 62, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_RSQ_F16", 63, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_LOG_F16", 64, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_EXP_F16", 65, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_FREXP_MANT_F16", 66, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_FREXP_EXP_I16_F16", 67, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_FLOOR_F16", 68, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CEIL_F16", 69, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_TRUNC_F16", 70, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_RNDNE_F16", 71, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_FRACT_F16", 72, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SIN_F16", 73, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_COS_F16", 74, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_EXP_LEGACY_F32", 75, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_LOG_LEGACY_F32", 76, FormatTable[VOP1], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})

	// TODO Initialize memory width
	// FLAT Instructions
	d.addInstType(&InstType{"FLAT_LOAD_UBYTE", 16, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 1})
	d.addInstType(&InstType{"FLAT_LOAD_SBYTE", 17, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 1})
	d.addInstType(&InstType{"FLAT_LOAD_USHORT", 18, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 2})
	d.addInstType(&InstType{"FLAT_LOAD_SSHORT", 19, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 2})
	d.addInstType(&InstType{"FLAT_LOAD_DWORD", 20, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 4 * 1})
	d.addInstType(&InstType{"FLAT_LOAD_DWORDX2", 21, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 4 * 2})
	d.addInstType(&InstType{"FLAT_LOAD_DWORDX3", 22, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 4 * 3})
	d.addInstType(&InstType{"FLAT_LOAD_DWORDX4", 23, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 4 * 4})
	d.addInstType(&InstType{"FLAT_STORE_BYTE", 24, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 1})
	d.addInstType(&InstType{"FLAT_STORE_SHORT", 26, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 2})
	d.addInstType(&InstType{"FLAT_STORE_DWORD", 28, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 4 * 1})
	d.addInstType(&InstType{"FLAT_STORE_DWORDX2", 29, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 4 * 2})
	d.addInstType(&InstType{"FLAT_STORE_DWORDX3", 30, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 4 * 3})
	d.addInstType(&InstType{"FLAT_STORE_DWORDX4", 31, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 4 * 4})
	d.addInstType(&InstType{"FLAT_ATOMIC_SWAP", 48, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_CMPSWAP", 49, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_ADD", 50, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_SUB", 51, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_SMIN", 53, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_UMIN", 54, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_SMAX", 55, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAG_ATOMIC_UMAX", 56, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_AND", 57, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_OR", 58, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_XOR", 59, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_INC", 60, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_DEC", 61, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_SWAP_X2", 80, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_CMPSWAP_X2", 81, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_ADD_X2", 82, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_SUB_X2", 83, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_SMIN_X2", 85, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_UMIN_X2", 86, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_SMAX_X2", 87, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_UMAX_X2", 88, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_AND_X2", 89, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_OR_X2", 90, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_XOR_X2", 91, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_INC_X2", 92, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"FLAT_ATOMIC_DEC_X2", 93, FormatTable[FLAT], 0, ExeUnitVMem, 32, 32, 32, 0, 0, 0})

	// SMEM instructions
	d.addInstType(&InstType{"S_LOAD_DWORD", 0, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 1})
	d.addInstType(&InstType{"S_LOAD_DWORDX2", 1, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 2})
	d.addInstType(&InstType{"S_LOAD_DWORDX4", 2, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 4})
	d.addInstType(&InstType{"S_LOAD_DWORDX8", 3, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 8})
	d.addInstType(&InstType{"S_LOAD_DWORDX16", 4, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 16})
	d.addInstType(&InstType{"S_BUFFER_LOAD_DWORD", 8, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 1})
	d.addInstType(&InstType{"S_BUFFER_LOAD_DWORDX2", 9, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 2})
	d.addInstType(&InstType{"S_BUFFER_LOAD_DWORDX4", 10, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 4})
	d.addInstType(&InstType{"S_BUFFER_LOAD_DWORDX8", 11, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 8})
	d.addInstType(&InstType{"S_BUFFER_LOAD_DWORDX16", 12, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 16})
	d.addInstType(&InstType{"S_STORE_DWORD", 16, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 1})
	d.addInstType(&InstType{"S_STORE_DWORDX2", 17, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 2})
	d.addInstType(&InstType{"S_STORE_DWORDX4", 18, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 4})
	d.addInstType(&InstType{"S_BUFFER_STORE_DWORD", 24, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 1})
	d.addInstType(&InstType{"S_BUFFER_STORE_DWORDX2", 25, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 2})
	d.addInstType(&InstType{"S_BUFFER_STORE_DWORDX4", 26, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 4 * 4})
	d.addInstType(&InstType{"S_DCACHE_INV", 32, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_DCACHE_WB", 33, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_DCACHE_INV_VOL", 34, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_DCACHE_WB_VOL", 35, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_MEMTIME", 36, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_MEMREALTIME", 37, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_ATC_PROBE", 38, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_ATC_PROBE_BUFFER", 39, FormatTable[SMEM], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})

	// SOPP instructions
	d.addInstType(&InstType{"S_NOP", 0, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_ENDPGM", 1, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_BRANCH", 2, FormatTable[SOPP], 0, ExeUnitBranch, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CBRANCH_SCC0", 4, FormatTable[SOPP], 0, ExeUnitBranch, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CBRANCH_SCC1", 5, FormatTable[SOPP], 0, ExeUnitBranch, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CBRANCH_VCCZ", 6, FormatTable[SOPP], 0, ExeUnitBranch, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CBRANCH_VCCNZ", 7, FormatTable[SOPP], 0, ExeUnitBranch, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CBRANCH_EXECZ", 8, FormatTable[SOPP], 0, ExeUnitBranch, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CBRANCH_EXECNZ", 9, FormatTable[SOPP], 0, ExeUnitBranch, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_BARRIER", 10, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_SETKILL", 11, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_WAITCNT", 12, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_SETHALT", 13, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_SLEEP", 14, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_SETPRIO", 15, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_SENDMSG", 16, FormatTable[SOPP], 0, ExeUnitBranch, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_SENDMSGHALT", 17, FormatTable[SOPP], 0, ExeUnitBranch, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_TRAP", 18, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_ICACHE_INV", 19, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_INCPERFLEVEL", 20, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_DECPERFLEVEL", 21, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_TTRACEDATA", 22, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CBRANCH_CDBGSYS", 23, FormatTable[SOPP], 0, ExeUnitBranch, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CBRANCH_CDBGUSER", 24, FormatTable[SOPP], 0, ExeUnitBranch, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CBRANCH_CDBGSYS_OR_USER", 25, FormatTable[SOPP], 0, ExeUnitBranch, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CBRANCH_CDBGSYS_AND_USER", 26, FormatTable[SOPP], 0, ExeUnitBranch, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_ENDPGM_SAVED", 27, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_SET_GPR_IDX_OFF", 28, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_SET_GPR_IDX_MODE", 29, FormatTable[SOPP], 0, ExeUnitSpecial, 32, 32, 32, 0, 0, 0})

	// SOPC instructions
	d.addInstType(&InstType{"S_CMP_EQ_I32", 0, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMP_LG_I32", 1, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMP_GT_I32", 2, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMP_GE_I32", 3, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMP_LT_I32", 4, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMP_LE_I32", 5, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMP_EQ_U32", 6, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMP_LG_U32", 7, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMP_GT_U32", 8, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMP_GE_U32", 9, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMP_LT_U32", 10, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMP_LE_U32", 11, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_BITCMP0_B32", 12, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_BITCMP1_B32", 13, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_BITCMP0_B64", 14, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_BITCMP1_B64", 15, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_SETVSKIP", 16, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_SET_GPR_IDX_ON", 17, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMP_EQ_U64", 18, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMP_NE_U64", 19, FormatTable[SOPC], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})

	// SOPK instructions
	d.addInstType(&InstType{"S_MOVK_I32", 0, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMOVK_I32", 1, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMPK_EQ_I32", 2, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMPK_LG_I32", 3, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMPK_GT_I32", 4, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMPK_GE_I32", 5, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMPK_LT_I32", 6, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMPK_LE_I32", 7, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMPK_EQ_U32", 8, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMPK_LG_U32", 9, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMPK_GT_U32", 10, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMPK_GE_U32", 11, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMPK_LT_U32", 12, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CMPK_LE_U32", 13, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_ADDK_I32", 14, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_MULK_I32", 15, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_CBRANCH_I_FORK", 16, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_GETREG_B32", 17, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_SETREG_B32", 18, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"S_SETREG_IMM32_B32", 20, FormatTable[SOPK], 0, ExeUnitScalar, 32, 32, 32, 0, 0, 0})

	// VOPC instruction
	d.addInstType(&InstType{"V_CMP_CLASS_F32", 0x10, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_CLASS_F32", 0x11, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_CLASS_F64", 0x12, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_CLASS_F64", 0x13, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_CLASS_F16", 0x14, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_CLASS_F16", 0x15, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_F16", 0x20, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_F16", 0x21, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_F16", 0x22, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_F16", 0x23, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_F16", 0x24, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LG_F16", 0x25, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_F16", 0x26, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_O_F16", 0x27, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_U_F16", 0x28, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NGE_F16", 0x29, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLG_F16", 0x2a, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NGT_F16", 0x2b, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLE_F16", 0x2c, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NEQ_F16", 0x2d, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLT_F16", 0x2e, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_F16", 0x2f, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_F16", 0x30, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_F16", 0x31, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_F16", 0x32, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_F16", 0x33, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_F16", 0x34, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_F16", 0x35, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_F16", 0x36, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_O_F16", 0x37, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_U_F16", 0x38, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NGE_F16", 0x39, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLG_F16", 0x3a, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NGT_F16", 0x3b, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLE_F16", 0x3c, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NEQ_F16", 0x3d, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLT_F16", 0x3e, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_F16", 0x3f, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_F32_E32", 0x40, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_F32_E32", 0x41, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_F32_E32", 0x42, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_F32_E32", 0x43, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_F32_E32", 0x44, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LG_F32_E32", 0x45, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_F32_E32", 0x46, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_O_F32_E32", 0x47, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_U_F32_E32", 0x48, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NGE_F32_E32", 0x49, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLG_F32_E32", 0x4a, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NGT_F32_E32", 0x4b, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLE_F32_E32", 0x4c, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NEQ_F32_E32", 0x4d, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLT_F32_E32", 0x4e, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_F32_E32", 0x4f, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_F32_E32", 0x50, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_F32_E32", 0x51, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_F32_E32", 0x52, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_F32_E32", 0x53, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_F32_E32", 0x54, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_F32_E32", 0x55, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_F32_E32", 0x56, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_O_F32_E32", 0x57, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_U_F32_E32", 0x58, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NGE_F32_E32", 0x59, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLG_F32_E32", 0x5a, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NGT_F32_E32", 0x5b, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLE_F32_E32", 0x5c, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NEQ_F32_E32", 0x5d, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLT_F32_E32", 0x5e, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_F32_E32", 0x5f, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_F64", 0x60, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_F64", 0x61, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_F64", 0x62, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_F64", 0x63, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_F64", 0x64, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LG_F64", 0x65, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_F64", 0x66, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_O_F64", 0x67, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_U_F64", 0x68, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NGE_F64", 0x69, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLG_F64", 0x6a, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NGT_F64", 0x6b, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLE_F64", 0x6c, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NEQ_F64", 0x6d, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLT_F64", 0x6e, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_F64", 0x6f, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_F64", 0x70, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_F64", 0x71, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_F64", 0x72, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_F64", 0x73, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_F64", 0x74, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_F64", 0x75, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_F64", 0x76, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_O_F64", 0x77, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_U_F64", 0x78, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NGE_F64", 0x79, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLG_F64", 0x7a, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NGT_F64", 0x7b, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLE_F64", 0x7c, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NEQ_F64", 0x7d, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLT_F64", 0x7e, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_F64", 0x7f, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_I16", 0xa0, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_I16", 0xa1, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_I16", 0xa2, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_I16", 0xa3, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_I16_E32", 0xa4, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LG_I16", 0xa5, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_I16", 0xa6, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_I16", 0xa7, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_U16", 0xa8, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_U16", 0xa9, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_U16", 0xaa, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_U16", 0xab, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_U16", 0xac, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LG_U16", 0xad, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_U16", 0xae, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_U16", 0xaf, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_I16", 0xb0, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_I16", 0xb1, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_I16", 0xb2, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_I16", 0xb3, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_I16", 0xb4, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_I16", 0xb5, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_I16", 0xb6, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_I16", 0xb7, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_U16", 0xb8, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_U16", 0xb9, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_U16", 0xba, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_U16", 0xbb, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_U16", 0xbc, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_U16", 0xbd, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_U16", 0xbe, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_U16", 0xbf, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_I32_E32", 0xc0, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_I32_E32", 0xc1, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_I32_E32", 0xc2, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_I32_E32", 0xc3, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_I32_E32", 0xc4, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LG_I32_E32", 0xc5, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_I32_E32", 0xc6, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_I32_E32", 0xc7, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_U32_E32", 0xc8, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_U32_E32", 0xc9, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_U32_E32", 0xca, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_U32_E32", 0xcb, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_U32_E32", 0xcc, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	// It is lg in the documentation
	d.addInstType(&InstType{"V_CMP_NE_U32_E32", 0xcd, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_U32_E32", 0xce, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_U32_E32", 0xcf, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_I32_E32", 0xd0, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_I32_E32", 0xd1, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_I32_E32", 0xd2, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_I32_E32", 0xd3, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_I32_E32", 0xd4, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_I32_E32", 0xd5, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_I32_E32", 0xd6, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_I32_E32", 0xd7, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_U32_E32", 0xd8, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_U32_E32", 0xd9, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_U32_E32", 0xda, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_U32_E32", 0xdb, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_U32_E32", 0xdc, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_U32_E32", 0xdd, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_U32_E32", 0xde, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_U32_E32", 0xdf, FormatTable[VOPC], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_I64", 0xe0, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_I64", 0xe1, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_I64", 0xe2, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_I64", 0xe3, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_I64", 0xe4, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LG_I64", 0xe5, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_I64", 0xe6, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_I64", 0xe7, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_U64", 0xe8, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_U64", 0xe9, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_U64", 0xea, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_U64", 0xeb, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_U64", 0xec, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LG_U64", 0xed, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_U64", 0xee, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_U64", 0xef, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_I64", 0xf0, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_I64", 0xf1, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_I64", 0xf2, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_I64", 0xf3, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_I64", 0xf4, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_I64", 0xf5, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_I64", 0xf6, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_I64", 0xf7, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_U64", 0xf8, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_U64", 0xf9, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_U64", 0xfa, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_U64", 0xfb, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_U64", 0xfc, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_U64", 0xfd, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_U64", 0xfe, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_U64", 0xff, FormatTable[VOPC], 0, ExeUnitVALU, 32, 64, 64, 0, 0, 0})

	// VOP3 Instructions
	d.addInstType(&InstType{"V_CMP_CLASS_F32", 0x10, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_CLASS_F32", 0x11, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_CLASS_F64", 0x12, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_CLASS_F64", 0x13, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_CLASS_F16", 0x14, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_CLASS_F16", 0x15, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_F16", 0x20, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_F16", 0x21, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_F16", 0x22, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_F16", 0x23, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_F16", 0x24, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LG_F16", 0x25, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_F16", 0x26, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_O_F16", 0x27, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_U_F16", 0x28, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NGE_F16", 0x29, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLG_F16", 0x2a, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NGT_F16", 0x2b, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLE_F16", 0x2c, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NEQ_F16", 0x2d, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLT_F16", 0x2e, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_F16", 0x2f, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_F16", 0x30, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_F16", 0x31, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_F16", 0x32, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_F16", 0x33, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_F16", 0x34, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_F16", 0x35, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_F16", 0x36, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_O_F16", 0x37, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_U_F16", 0x38, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NGE_F16", 0x39, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLG_F16", 0x3a, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NGT_F16", 0x3b, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLE_F16", 0x3c, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NEQ_F16", 0x3d, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLT_F16", 0x3e, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_F16", 0x3f, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_F32_E64", 0x40, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_F32_E64", 0x41, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_F32_E64", 0x42, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_F32_E64", 0x43, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_F32_E64", 0x44, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LG_F32_E64", 0x45, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_F32_E64", 0x46, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_O_F32_E64", 0x47, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_U_F32_E64", 0x48, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NGE_F32_E64", 0x49, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLG_F32_E64", 0x4a, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NGT_F32_E64", 0x4b, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLE_F32_E64", 0x4c, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NEQ_F32_E64", 0x4d, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLT_F32_E64", 0x4e, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_F32_E64", 0x4f, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_F32_E64", 0x50, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_F32_E64", 0x51, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_F32_E64", 0x52, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_F32_E64", 0x53, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_F32_E64", 0x54, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_F32_E64", 0x55, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_F32_E64", 0x56, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_O_F32_E64", 0x57, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_U_F32_E64", 0x58, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NGE_F32_E64", 0x59, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLG_F32_E64", 0x5a, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NGT_F32_E64", 0x5b, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLE_F32_E64", 0x5c, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NEQ_F32_E64", 0x5d, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLT_F32_E64", 0x5e, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_F32_E64", 0x5f, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_F64", 0x60, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_F64", 0x61, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_F64", 0x62, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_F64", 0x63, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_F64", 0x64, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LG_F64", 0x65, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_F64", 0x66, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_O_F64", 0x67, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_U_F64", 0x68, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NGE_F64", 0x69, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLG_F64", 0x6a, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NGT_F64", 0x6b, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLE_F64", 0x6c, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NEQ_F64", 0x6d, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_NLT_F64", 0x6e, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_F64", 0x6f, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_F64", 0x70, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_F64", 0x71, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_F64", 0x72, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_F64", 0x73, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_F64", 0x74, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_F64", 0x75, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_F64", 0x76, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_O_F64", 0x77, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_U_F64", 0x78, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NGE_F64", 0x79, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLG_F64", 0x7a, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NGT_F64", 0x7b, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLE_F64", 0x7c, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NEQ_F64", 0x7d, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_NLT_F64", 0x7e, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_F64", 0x7f, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_I16", 0xa0, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_I16", 0xa1, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_I16", 0xa2, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_I16", 0xa3, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_I16", 0xa4, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LG_I16", 0xa5, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_I16", 0xa6, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_I16", 0xa7, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_U16", 0xa8, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_U16", 0xa9, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_U16", 0xaa, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_U16", 0xab, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_U16", 0xac, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LG_U16", 0xad, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_U16", 0xae, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_U16", 0xaf, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_I16", 0xb0, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_I16", 0xb1, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_I16", 0xb2, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_I16", 0xb3, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_I16", 0xb4, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_I16", 0xb5, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_I16", 0xb6, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_I16", 0xb7, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_U16", 0xb8, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_U16", 0xb9, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_U16", 0xba, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_U16", 0xbb, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_U16", 0xbc, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_U16", 0xbd, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_U16", 0xbe, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_U16", 0xbf, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_I32_E64", 0xc0, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_LT_I32_E64", 0xc1, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_EQ_I32_E64", 0xc2, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_LE_I32_E64", 0xc3, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_GT_I32_E64", 0xc4, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_LG_I32_E64", 0xc5, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_GE_I32_E64", 0xc6, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_TRU_I32_E64", 0xc7, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_F_U32_E64", 0xc8, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_LT_U32_E64", 0xc9, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_EQ_U32_E64", 0xca, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_LE_U32_E64", 0xcb, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_GT_U32_E64", 0xcc, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_NE_U32_E64", 0xcd, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_GE_U32_E64", 0xce, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_TRU_U32_E64", 0xcf, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_F_I32_E64", 0xd0, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_LT_I32_E64", 0xd1, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_I32_E64", 0xd2, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_LE_I32_E64", 0xd3, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_GT_I32_E64", 0xd4, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_LG_I32_E64", 0xd5, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_GE_I32_E64", 0xd6, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_I32_E64", 0xd7, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_F_U32_E64", 0xd8, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_LT_U32_E64", 0xd9, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_U32_E64", 0xda, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_LE_U32_E64", 0xdb, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_GT_U32_E64", 0xdc, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_LG_U32_E64", 0xdd, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_GE_U32_E64", 0xde, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_U32_E64", 0xdf, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_CMP_F_I64", 0xe0, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_I64", 0xe1, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_I64", 0xe2, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_I64", 0xe3, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_I64", 0xe4, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LG_I64", 0xe5, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_I64", 0xe6, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_I64", 0xe7, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_F_U64", 0xe8, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LT_U64", 0xe9, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_EQ_U64", 0xea, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LE_U64", 0xeb, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GT_U64", 0xec, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_LG_U64", 0xed, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_GE_U64", 0xee, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMP_TRU_U64", 0xef, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_I64", 0xf0, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_I64", 0xf1, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_I64", 0xf2, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_I64", 0xf3, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_I64", 0xf4, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_I64", 0xf5, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_I64", 0xf6, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_I64", 0xf7, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_F_U64", 0xf8, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LT_U64", 0xf9, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_EQ_U64", 0xfa, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LE_U64", 0xfb, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GT_U64", 0xfc, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_LG_U64", 0xfd, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_GE_U64", 0xfe, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CMPX_TRU_U64", 0xff, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_CNDMASK_B32_E64", 0 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 64, 0, 0})
	d.addInstType(&InstType{"V_ADD_F32", 1 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUB_F32_E64", 2 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUBREV_F32", 3 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_LEGACY_F32", 4 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_F32_E32", 5 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_I32_I24", 6 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_HI_I32_I24", 7 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_U32_U24_E32", 8 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_HI_U32_U24", 9 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MIN_F32", 10 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAX_F32", 11 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MIN_I32", 12 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAX_I32", 13 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MIN_U32_E32", 14 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAX_U32_E32", 15 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_LSHRREV_B32_E32", 16 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_ASHRREV_I32_E32", 17 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_LSHLREV_B32_E32", 18 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_AND_B32_E32", 19 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_OR_B32_E32", 20 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_XOR_B32_E32", 21 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAC_F32_E32", 22 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MADMK_F32", 23 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MADAK_F32", 24 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_ADD_U32_E64", 25 + 256, FormatTable[VOP3b], 0, ExeUnitVALU, 32, 32, 32, 64, 64, 0})
	d.addInstType(&InstType{"V_SUB_U32_E64", 26 + 256, FormatTable[VOP3b], 0, ExeUnitVALU, 32, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_SUBREV_U32_E64", 27 + 256, FormatTable[VOP3b], 0, ExeUnitVALU, 32, 32, 0, 0, 64, 0})
	d.addInstType(&InstType{"V_ADDC_U32_E64", 28 + 256, FormatTable[VOP3b], 0, ExeUnitVALU, 32, 32, 32, 64, 64, 0})
	d.addInstType(&InstType{"V_SUBB_U32_E64", 29 + 256, FormatTable[VOP3b], 0, ExeUnitVALU, 32, 32, 32, 0, 64, 0})
	d.addInstType(&InstType{"V_SUBBREV_U32_E64", 30 + 256, FormatTable[VOP3b], 0, ExeUnitVALU, 32, 32, 32, 64, 64, 0})
	d.addInstType(&InstType{"V_ADD_F16", 31 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUB_F16", 32 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUBREV_F16", 33 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_F16", 34 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAC_F16", 35 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MADMK_F16", 36 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MADAK_F16", 37 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_ADD_U16", 38 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUB_U16", 39 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_SUBREV_U16", 40 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_LO_U16", 41 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_LSHLREV_B16", 42 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_LSHRREV_B16", 43 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_ASHRREV_I16", 44 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAX_F16", 45 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MIN_F16", 46 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAX_U16", 47 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAX_I16", 48 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MIN_U16", 49 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MIN_I16", 50 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_LDEXP_F16", 51 + 256, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})

	for _, instType := range d.decodeTables[VOP1].insts {
		d.addInstType(&InstType{instType.InstName,
			instType.Opcode + Opcode(320),
			FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	}
	d.addInstType(&InstType{"V_MAD_LEGACY_F32", 448, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MAD_F32", 449, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MAD_I32_I24", 450, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MAD_U32_U24", 451, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_CUBEID_F32", 452, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_CUBESC_F32", 453, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_CUBETC_F32", 454, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_CUBEMA_F32", 455, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_BFE_U32", 456, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_BFE_I32", 457, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_BFI_B32", 458, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_FMA_F32", 459, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_FMA_F64", 460, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 64, 0, 0})
	d.addInstType(&InstType{"V_LERP_U8", 461, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_ALIGNBIT_B32", 462, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_ALIGNBYTE_B32", 463, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MIN3_F32", 464, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MIN3_I32", 465, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MIN3_U32", 466, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MAX3_F32", 467, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MAX3_I32", 468, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MAX3_U32", 469, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MED3_F32", 470, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MED3_I32", 471, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MED3_U32", 472, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_SAD_U8", 473, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_SAD_HI_U8", 474, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_SAD_U16", 475, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_SAD_U32", 476, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_CVT_PK_U8_F32", 477, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_DIV_FIXUP_F32", 478, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_DIV_FIXUP_F64", 479, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 64, 0, 0})
	d.addInstType(&InstType{"V_DIV_SCALE_F32", 480, FormatTable[VOP3b], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_DIV_SCALE_F64", 481, FormatTable[VOP3b], 0, ExeUnitVALU, 64, 64, 64, 64, 64, 0})
	d.addInstType(&InstType{"V_DIV_FMAS_F32", 482, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_DIV_FMAS_F64", 483, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 64, 0, 0})
	d.addInstType(&InstType{"V_MSAD_U8", 484, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_QSAD_PK_U16_U8", 485, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MQSAD_PK_U16_U8", 486, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MQSAD_U32_U8", 487, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MAD_U64_U32", 488, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MAD_I64_I32", 489, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MAD_F16", 490, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MAD_U16", 491, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MAD_I16", 492, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_PERM_B32", 493, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_FMA_F16", 494, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_DIV_FIXUP_16", 495, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_CVT_PKACCUM_U8_F32", 496, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_INTERP_P1_F32", 624, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_INTERP_P2_F32", 625, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_INTERP_MOV_F32", 626, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_INTERP_P1LL_F16", 628, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_INTERP_P1LV_F16", 629, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_INTERP_P2_F16", 630, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_ADD_F64", 640, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_F64", 641, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_MIN_F64_E64", 642, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MAX_F64_E64", 643, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_LDEXP_F64", 644, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MUL_LO_U32", 645, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_HI_U32", 646, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_MUL_HI_I32", 647, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_LDEXP_F32", 648, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_READLANE_B32", 649, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_WRITELANE_B32", 650, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_BCNT_U32_B32", 651, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MBCNT_LO_U32_B32", 652, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_MBCNT_HI_U32_B32", 653, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 32, 0, 0})
	d.addInstType(&InstType{"V_LSHLREV_B64", 655, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_LSHRREV_B64", 656, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_ASHRREV_I64", 657, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_TRIG_PREOP_F64", 658, FormatTable[VOP3a], 0, ExeUnitVALU, 64, 64, 64, 0, 0, 0})
	d.addInstType(&InstType{"V_BFM_B32", 659, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_PKNORM_I16_F32", 660, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_PKNORM_U16_F32", 661, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_PKRTZ_F16_F32", 662, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_PK_U16_U32", 663, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})
	d.addInstType(&InstType{"V_CVT_PK_I16_I32", 664, FormatTable[VOP3a], 0, ExeUnitVALU, 32, 32, 32, 0, 0, 0})

	// SOP1 Instructions
	d.addInstType(&InstType{"S_MOV_B32", 0, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_MOV_B64", 1, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_CMOV_B32", 2, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_CMOV_B64", 3, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_NOT_B32", 4, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_NOT_B64", 5, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_WQM_B32", 6, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_WQM_B64 ", 7, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_BREV_B32", 8, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_BREV_B64", 9, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_BCNT0_I32_B32", 10, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_BCNT0_I32_B64", 11, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_BCNT1_I32_B32", 12, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_BCNT1_I32_B64", 13, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_FF0_I32_B32", 14, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_FF0_I32_B64", 15, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_FF1_I32_B32", 16, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_FF1_I32_B64", 17, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_FLBIT_I32_B32", 18, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_FLBIT_I32_B64", 19, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_FLBIT_I32", 20, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_FLBIT_I32_I64", 21, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_SEXT_I32_I8", 22, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_SEXT_I32_I16", 23, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_BITSET0_B32", 24, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_BITSET0_B64", 25, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_BITSET1_B32", 26, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_BITSET1_B64", 27, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_GETPC_B64", 28, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_SETPC_B64", 29, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_SWAPPC_B64", 30, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_RFE_B64", 31, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_AND_SAVEEXEC_B64", 32, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_OR_SAVEEXEC_B64", 33, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_XOR_SAVEEXEC_B64", 34, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_ANDN2_SAVEEXEC_B64", 35, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_ORN2_SAVEEXEC_B64", 36, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_NAND_SAVEEXEC_B64", 37, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_NOR_SAVEEXEC_B64", 38, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_XNOR_SAVEEXEC_B64", 39, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_QUADMASK_B32", 40, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_QUADMASK_B64", 41, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_MOVRELS_B32", 42, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_MOVRELS_B64", 43, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_MOVRELD_B32", 44, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_MOVRELD_B64", 45, FormatTable[SOP1], 0, ExeUnitScalar, 64, 64, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_CBRANCH_JOIN", 46, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_ABS_I32", 48, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})
	d.addInstType(&InstType{"S_SET_GPR_IDX_IDX", 49, FormatTable[SOP1], 0, ExeUnitScalar, 32, 32, 0, 0, 0, 0})

	// TODO DS Memory width?
	// Treat ds ALU operations with 0 width as they are not in the asm
	// For read2/write2, treat as consecutive read/write instead of two separate address
	// as the accel-sim format currently does not have write to multiple addresses for one lane?
	d.addInstType(&InstType{"DS_ADD_U32", 0, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_SUB_U32", 1, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_RSUB_U32", 2, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_INC_U32", 3, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_DEC_U32", 4, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_I32", 5, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_I32", 6, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_U32", 7, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_U32", 8, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_AND_B32", 9, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_OR_B32", 10, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_XOR_B32", 11, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MSKOR_B32", 12, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_WRITE_B32", 13, FormatTable[DS], 0, ExeUnitLDS, 0, 32, 0, 0, 0, 4 * 1})
	d.addInstType(&InstType{"DS_WRITE2_B32", 14, FormatTable[DS], 0, ExeUnitLDS, 0, 32, 32, 0, 0, 4 * 2})
	d.addInstType(&InstType{"DS_WRITE2ST64_B32", 15, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 4 * 2})
	d.addInstType(&InstType{"DS_CMPST_B32", 16, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_CMPST_F32", 17, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_F32", 18, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_F32", 19, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_NOP ", 20, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_ADD_F32", 21, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_WRITE_B8", 30, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 1})
	d.addInstType(&InstType{"DS_WRITE_B16", 31, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 2})
	d.addInstType(&InstType{"DS_ADD_RTN_U32", 32, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_SUB_RTN_U32", 33, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_RSUB_RTN_U32", 34, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_INC_RTN_U32", 35, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_DEC_RTN_U32", 36, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_RTN_I32", 37, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_RTN_I32", 38, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_RTN_U32", 39, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_RTN_U32", 40, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_AND_RTN_B32", 41, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_OR_RTN_B32", 42, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_XOR_RTN_B32", 43, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MSKOR_RTN_B32", 44, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_WRXCHG_RTN_B32", 45, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_WRXCHG2_RTN_B32", 46, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_WRXCHG2ST64_RTN_B32", 47, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_CMPST_RTN_B32", 48, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_CMPST_RTN_F32", 49, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_RTN_F32", 50, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_RTN_F32", 51, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_WRAP_RTN_B32", 52, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_READ_B32", 54, FormatTable[DS], 0, ExeUnitLDS, 32, 0, 0, 0, 0, 4 * 1})
	d.addInstType(&InstType{"DS_READ2_B32", 55, FormatTable[DS], 0, ExeUnitLDS, 64, 0, 0, 0, 0, 4 * 2})
	d.addInstType(&InstType{"DS_READ2ST64_B32", 56, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 4 * 2})
	d.addInstType(&InstType{"DS_READ_I8", 57, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 1})
	d.addInstType(&InstType{"DS_READ_U8", 58, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 1})
	d.addInstType(&InstType{"DS_READ_I16", 59, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 2})
	d.addInstType(&InstType{"DS_READ_U16", 60, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 2})
	d.addInstType(&InstType{"DS_SWIZZLE_B32", 61, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_PERMUTE_B32", 62, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_BPERMUTE_B32", 63, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_ADD_U64", 64, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_SUB_U64", 65, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_RSUB_U64", 66, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_INC_U64", 67, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_DEC_U64", 68, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_I64", 69, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_I64", 70, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_U64", 71, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_U64", 72, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_AND_B64", 73, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_OR_B64", 74, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_XOR_B64", 75, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MSKOR_B64", 76, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_WRITE_B64", 77, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 4 * 2})
	d.addInstType(&InstType{"DS_WRITE2_B64", 78, FormatTable[DS], 0, ExeUnitLDS, 0, 64, 64, 0, 0, 4 * 2 * 2})
	d.addInstType(&InstType{"DS_WRITE2ST64_B64", 79, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 4 * 2 * 2})
	d.addInstType(&InstType{"DS_CMPST_B64", 80, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_CMPST_F64", 81, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_F64", 82, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_F64", 83, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_ADD_RTN_U64", 96, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_SUB_RTN_U64", 97, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_RSUB_RTN_U64", 98, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_INC_RTN_U64", 99, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_DEC_RTN_U64", 100, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_RTN_I64", 101, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_RTN_I64", 102, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_RTN_U64", 103, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_RTN_U64", 104, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_AND_RTN_B64", 105, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_OR_RTN_B64", 106, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_XOR_RTN_B64", 107, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MSKOR_RTN_B64", 108, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_WRXCHG_RTN_B64", 109, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_WRXCHG2_RTN_B64", 110, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_WRXCHG2ST64_RTN_B64", 111, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_CMPST_RTN_B64", 112, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_CMPST_RTN_F64", 113, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_RTN_F64", 114, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_RTN_F64", 115, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_READ_B64", 118, FormatTable[DS], 0, ExeUnitLDS, 64, 0, 0, 0, 0, 4 * 2})
	d.addInstType(&InstType{"DS_READ2_B64", 119, FormatTable[DS], 0, ExeUnitLDS, 128, 0, 0, 0, 0, 4 * 2 * 2})
	d.addInstType(&InstType{"DS_READ2ST64_B64", 120, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 4 * 2 * 2})
	d.addInstType(&InstType{"DS_CONDXCHG32_RTN_B64", 126, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_ADD_SRC2_U32", 128, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_SUB_SRC2_U32", 129, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_RSUB_SRC2_U32", 130, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_INC_SRC2_U32", 131, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_DEC_SRC2_U32", 132, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_SRC2_I32", 133, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_SRC2_I32", 134, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_SRC2_U32", 135, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_SRC2_U32", 136, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_AND_SRC2_B32", 137, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_OR_SRC2_B32", 138, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_XOR_SRC2_B32", 139, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_WRITE_SRC2_B32", 141, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 4 * 1})
	d.addInstType(&InstType{"DS_MIN_SRC2_F32", 146, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_SRC2_F32", 147, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_GWS_SEMA_RELEASE_ALL", 152, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_GWS_INIT", 153, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_GWS_SEMA_V", 154, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_GWS_SEMA_BR", 155, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_GWS_SEMA_P", 156, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_GWS_BARRIER", 157, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_CONSUME", 189, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_APPEND", 190, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_ORDERED_COUNT", 191, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_ADD_SRC2_U64", 192, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_SUB_SRC2_U64", 193, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_RSUB_SRC2_U64", 194, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_INC_SRC2_U64", 195, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_DEC_SRC2_U64", 196, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_SRC2_I64", 197, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_SRC2_I64", 198, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MIN_SRC2_U64", 199, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_SRC2_U64", 200, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_AND_SRC2_B64", 201, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_OR_SRC2_B64", 202, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_XOR_SRC2_B64", 203, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_WRITE_SRC2_B64", 205, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 4 * 2})
	d.addInstType(&InstType{"DS_MIN_SRC2_F64", 210, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_MAX_SRC2_F64", 211, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_WRITE_B96", 222, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 4 * 3})
	d.addInstType(&InstType{"DS_WRITE_B128", 223, FormatTable[DS], 0, ExeUnitLDS, 0, 128, 0, 0, 0, 4 * 4})
	d.addInstType(&InstType{"DS_CONDXCHG32_RTN_B128", 253, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 0})
	d.addInstType(&InstType{"DS_READ_B96", 254, FormatTable[DS], 0, ExeUnitLDS, 0, 0, 0, 0, 0, 4 * 3})
	d.addInstType(&InstType{"DS_READ_B128", 255, FormatTable[DS], 0, ExeUnitLDS, 128, 0, 0, 0, 0, 4 * 4})
}
